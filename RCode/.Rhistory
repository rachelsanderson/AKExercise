opt$xh
draws = ivmcmc2(bg0, Vyxwz, nobs, nx, nw, nz, flatrf=TRUE, H0, nit=1000000)
tail(draws)
draws = ivmcmc2(opt$xh, Vyxwz, nobs, nx, nw, nz, flatrf=TRUE, H0, nit=100000)
draws
tail(draws)
library(coda)
effectiveSize(draws)
cov(draws[,1:6])
newHess = cov(draws[,1:6])
newDraws = ivmcmc2(opt$xh, Vyxwz, nobs, nx, nw, nz, flatrf=TRUE, newHess, nit=100000)
tail(draws)
plot(draws[,1])
tail(newDraws)
plot(newDraws[,1])
plot(newDraws[,1], type="l")
effectiveSize(newDraws)
source("do_mcmc.R")
(draws xh) <- do_mcmc(y, x, w, z){
data = cbind(y, x, w, z)
Vyxwz = t(data)%*%data
nobs = dim(data)[1]
nx= dim(x)[2]
nw= dim(w)[2]
nz= dim(z)[2]
bg0 = rep(1, nx+nw +nx*(nw+nz))
ll <- function(x){
return(ivlh_faster(x, Vyxwz, nobs, nx, nw, nz, flatrf=TRUE))
}
#Get initial jump distribution from ML of likelihood fnc.
opt <- csminwelNew(ll, bg0, H0=diag(nx+nw +nx*(nw+nz)), nit=10000)
H0 <- opt$H
#do 100k reps to get a better jump
draws = ivmcmc2(opt$xh, Vyxwz, nobs, nx, nw, nz, flatrf=TRUE, H0, nit=100000)
newHess = 0.3*cov(draws[,1:6])
newDraws = ivmcmc2(opt$xh, Vyxwz, nobs, nx, nw, nz, flatrf=TRUE, newHess, nit=100000)
return(newDraws, opt$xh)
}
draws <- do_mcmc(y, x, w, z){
data = cbind(y, x, w, z)
Vyxwz = t(data)%*%data
nobs = dim(data)[1]
nx= dim(x)[2]
nw= dim(w)[2]
nz= dim(z)[2]
bg0 = rep(1, nx+nw +nx*(nw+nz))
ll <- function(x){
return(ivlh_faster(x, Vyxwz, nobs, nx, nw, nz, flatrf=TRUE))
}
#Get initial jump distribution from ML of likelihood fnc.
opt <- csminwelNew(ll, bg0, H0=diag(nx+nw +nx*(nw+nz)), nit=10000)
H0 <- opt$H
#do 100k reps to get a better jump
draws = ivmcmc2(opt$xh, Vyxwz, nobs, nx, nw, nz, flatrf=TRUE, H0, nit=100000)
newHess = 0.3*cov(draws[,1:6])
newDraws = ivmcmc2(opt$xh, Vyxwz, nobs, nx, nw, nz, flatrf=TRUE, newHess, nit=100000)
return(newDraws, opt$xh)
}
source("do_mcmc.R")
#Load in the data, define variables for model:
# y = beta*x + eps
# x = gamma*z + nu
# (eps, nu) ~ N(0, Sigma)
akdataf <- read.csv("../Data/akdata.csv", header = TRUE)
source("do_mcmc.R")
draws <- do_mcmc(y, x, w, z, its) {
data = cbind(y, x, w, z)
Vyxwz = t(data)%*%data
nobs = dim(data)[1]
nx= dim(x)[2]
nw= dim(w)[2]
nz= dim(z)[2]
bg0 = rep(1, nx+nw +nx*(nw+nz))
ll <- function(x){
return(ivlh_faster(x, Vyxwz, nobs, nx, nw, nz, flatrf=TRUE))
}
#Get initial jump distribution from ML of likelihood fnc.
opt <- csminwelNew(ll, bg0, H0=diag(nx+nw +nx*(nw+nz)), nit=10000)
H0 <- opt$H
#do 100k reps to get a better jump
draws = ivmcmc2(opt$xh, Vyxwz, nobs, nx, nw, nz, flatrf=TRUE, H0, nit=100000)
newHess = 0.3*cov(draws[,1:6])
newDraws = ivmcmc2(opt$xh, Vyxwz, nobs, nx, nw, nz, flatrf=TRUE, newHess, nit=its)
return(newDraws)
}
source("do_mcmc.R")
draws <- do_mcmc(y, x, w, z, its){
data = cbind(y, x, w, z)
Vyxwz = t(data)%*%data
nobs = dim(data)[1]
nx= dim(x)[2]
nw= dim(w)[2]
nz= dim(z)[2]
bg0 = rep(1, nx+nw +nx*(nw+nz))
ll <- function(x){
return(ivlh_faster(x, Vyxwz, nobs, nx, nw, nz, flatrf=TRUE))
}
#Get initial jump distribution from ML of likelihood fnc.
opt <- csminwelNew(ll, bg0, H0=diag(nx+nw +nx*(nw+nz)), nit=10000)
H0 <- opt$H
#do 100k reps to get a better jump
draws = ivmcmc2(opt$xh, Vyxwz, nobs, nx, nw, nz, flatrf=TRUE, H0, nit=100000)
newHess = 0.3*cov(draws[,1:6])
newDraws = ivmcmc2(opt$xh, Vyxwz, nobs, nx, nw, nz, flatrf=TRUE, newHess, nit=its)
return(newDraws)
}
source("ivmcmc_faster.R")
source("do_mcmc.R")
source("do_mcmc.R")
source("do_mcmc.R")
nit = 1000
draws <- do_mcmc(y,x,w,z, nit)
dim(x)
# AK_main.R
# Program for performing MCMC on likelihood of AK data
#Import relevant libraries
library(bayess)
library(moments)
library(VARex5132017)
library(coda)
source("ivlh_faster.R")
source("ivmcmc_faster.R")
source("do_mcmc.R")
#Load in the data, define variables for model:
# y = beta*x + eps
# x = gamma*z + nu
# (eps, nu) ~ N(0, Sigma)
akdataf <- read.csv("../Data/akdata.csv", header = TRUE)
hist(akdataf$logwage)
y = akdataf$logwage
x = akdataf$educ
qob = akdataf$qob
qob.f = factor(qob)
z = model.matrix(~qob.f)[,2:4]
w= rep(1, length(x))
nit = 1000
draws <- do_mcmc(y,x,w,z, nit)
#Initialize beta-gamma0 by finding L,k
# X = cbind(x, w)
# k= dim(X)[2]
# L= dim(z)[2]
#
# # Calculate second moments of the data
# data = cbind(y, x, w, z)
# Vyxwz = t(data)%*%data
#
# nobs = dim(data)[1]
# nx=1
# nw=1
# nz=3
#
# bg0 = rep(1, nx+nw +nx*(nw+nz))
#
# #Get initial jump distribution from ML of likelihood fnc.
#
# ll <- function(x){
#   return(ivlh_faster(x, Vyxwz, nobs, nx, nw, nz, flatrf=TRUE))
# }
#
# opt <- csminwelNew(ll, bg0, H0=diag(nx+nw +nx*(nw+nz)), nit=10000)
# H0 <- opt$H
#
# draws = ivmcmc2(opt$xh, Vyxwz, nobs, nx, nw, nz, flatrf=TRUE, H0, nit=100000)
# newHess = cov(draws[,1:6])
#
# newDraws = ivmcmc2(opt$xh, Vyxwz, nobs, nx, nw, nz, flatrf=TRUE, newHess, nit=100000)
# # plot(draws[,7], type="l")
draws
effectiveSize(draws)
nit = 10000
draws <- do_mcmc(y,x,w,z, nit)
akdataf <- read.csv("../Data/akdata.csv", header = TRUE)
hist(akdataf$logwage)
y = akdataf$logwage
x = akdataf$educ
qob = akdataf$qob
qob.f = factor(qob)
z = model.matrix(~qob.f)[,2:4]
w= rep(1, length(x))
nit = 10000
draws <- do_mcmc(y,x,w,z, nit)
effectiveSize(draws)
#Initialize beta-gamma0 by
effectiveSize(draws)
dim(x)
x = akdataf$educ
dim(x)
x
x = akdataf$educ
dim(x)
length(x)
x = c(akdataf$educ)
dim(x)
# AK_main.R
# Program for performing MCMC on likelihood of AK data
#Import relevant libraries
library(bayess)
library(moments)
library(VARex5132017)
library(coda)
source("ivlh_faster.R")
source("ivmcmc_faster.R")
source("do_mcmc.R")
#Load in the data, define variables for model:
# y = beta*x + eps
# x = gamma*z + nu
# (eps, nu) ~ N(0, Sigma)
akdataf <- read.csv("../Data/akdata.csv", header = TRUE)
hist(akdataf$logwage)
y = akdataf$logwage
x = akdataf$educ
qob = akdataf$qob
qob.f = factor(qob)
z = model.matrix(~qob.f)[,2:4]
w= rep(1, length(x))
nx=1
nw=1
nz=3
nit = 10000
draws <- do_mcmc(y,x,w,z, nx, nw, nz, nit)
effectiveSize(draws)
#Initialize beta-gamma0 by finding L,k
# X = cbind(x, w)
# k= dim(X)[2]
# L= dim(z)[2]
#
# # Calculate second moments of the data
# data = cbind(y, x, w, z)
# Vyxwz = t(data)%*%data
#
# nobs = dim(data)[1]
# nx=1
# nw=1
# nz=3
#
# bg0 = rep(1, nx+nw +nx*(nw+nz))
#
# #Get initial jump distribution from ML of likelihood fnc.
#
# ll <- function(x){
#   return(ivlh_faster(x, Vyxwz, nobs, nx, nw, nz, flatrf=TRUE))
# }
#
# opt <- csminwelNew(ll, bg0, H0=diag(nx+nw +nx*(nw+nz)), nit=10000)
# H0 <- opt$H
#
# draws = ivmcmc2(opt$xh, Vyxwz, nobs, nx, nw, nz, flatrf=TRUE, H0, nit=100000)
# newHess = cov(draws[,1:6])
#
# newDraws = ivmcmc2(opt$xh, Vyxwz, nobs, nx, nw, nz, flatrf=TRUE, newHess, nit=100000)
# # plot(draws[,7], type="l")
# AK_main.R
# Program for performing MCMC on likelihood of AK data
#Import relevant libraries
library(bayess)
library(moments)
library(VARex5132017)
library(coda)
source("ivlh_faster.R")
source("ivmcmc_faster.R")
source("do_mcmc.R")
#Load in the data, define variables for model:
# y = beta*x + eps
# x = gamma*z + nu
# (eps, nu) ~ N(0, Sigma)
akdataf <- read.csv("../Data/akdata.csv", header = TRUE)
hist(akdataf$logwage)
y = akdataf$logwage
x = akdataf$educ
qob = akdataf$qob
qob.f = factor(qob)
z = model.matrix(~qob.f)[,2:4]
w= rep(1, length(x))
nx=1
nw=1
nz=3
nit = 10000
draws <- do_mcmc(y,x,w,z, nx, nw, nz, nit)
effectiveSize(draws)
#Initialize beta-gamma0 by finding L,k
# X = cbind(x, w)
# k= dim(X)[2]
# L= dim(z)[2]
#
# # Calculate second moments of the data
# data = cbind(y, x, w, z)
# Vyxwz = t(data)%*%data
#
# nobs = dim(data)[1]
# nx=1
# nw=1
# nz=3
#
# bg0 = rep(1, nx+nw +nx*(nw+nz))
#
# #Get initial jump distribution from ML of likelihood fnc.
#
# ll <- function(x){
#   return(ivlh_faster(x, Vyxwz, nobs, nx, nw, nz, flatrf=TRUE))
# }
#
# opt <- csminwelNew(ll, bg0, H0=diag(nx+nw +nx*(nw+nz)), nit=10000)
# H0 <- opt$H
#
# draws = ivmcmc2(opt$xh, Vyxwz, nobs, nx, nw, nz, flatrf=TRUE, H0, nit=100000)
# newHess = cov(draws[,1:6])
#
# newDraws = ivmcmc2(opt$xh, Vyxwz, nobs, nx, nw, nz, flatrf=TRUE, newHess, nit=100000)
# # plot(draws[,7], type="l")
effectiveSize(draws)
draws(tail)
tail(draws)
draws
cov(draws[,1:6])
library(fitR)
burnAndThin(draws, burn = 5000)
draws
aburn <- burnAndThin(draws, burn = 5000)
temp = mcmc(draws)
temp
hs_dum = as.numeric(educ >= 12)
hs_dum = as.numeric(akdataf$educ >= 12)
X = cbind(akdataf$educ, hs_dum)
X
dim(X)
nx=2
draws <- do_mcmc(y,X,w,z, nx, nw, nz, nit)
hsDraws <- do_mcmc(y,X,w,z, nx, nw, nz, nit)
x
X
x
X
dim(x)
dim(X)
crossprod(y,X)
crossprod(y,x)
draws = ivmcmc2(opt$xh, Vyxwz, nobs, nx, nw, nz, flatrf=TRUE, H0, nit=100000)
H0
data = cbind(y, x, w, z)
Vyxwz = t(data)%*%data
nobs = dim(data)[1]
bg0 = rep(1, nx+nw +nx*(nw+nz))
ll <- function(x){
return(ivlh_faster(x, Vyxwz, nobs, nx, nw, nz, flatrf=TRUE))
}
#Get initial jump distribution from ML of likelihood fnc.
opt <- csminwelNew(ll, bg0, H0=diag(nx+nw +nx*(nw+nz)), nit=10000)
H0 <- opt$H
#do 100k reps to get a better jump
draws = ivmcmc2(opt$xh, Vyxwz, nobs, nx, nw, nz, flatrf=TRUE, H0, nit=100000)
newHess = 0.3*cov(draws[,1:6])
# AK_main.R ~ Program for performing MCMC on likelihood of AK data.
# Loads in data from akdata.csv, passes variables into do_mcmc.R function.
# Variables defined from 2SLS model:
# y = beta*x + eps
# x = gamma*z + nu
# (eps, nu) ~ N(0, Sigma)
#Import relevant libraries
library(bayess)
library(moments)
library(VARex5132017)
library(coda)
library(fitR)
source("ivlh_faster.R")
source("ivmcmc_faster.R")
source("do_mcmc.R")
#Question 3: One X variable (X=education)
akdataf <- read.csv("../Data/akdata.csv", header = TRUE)
hist(akdataf$logwage)
y = akdataf$logwage
x = akdataf$educ
qob = akdataf$qob
qob.f = factor(qob)
z = model.matrix(~qob.f)[,2:4]
w= rep(1, length(x))
nx=1
nw=1
nz=3
nit = 10000
# draws <- do_mcmc(y,x,w,z, nx, nw, nz, nit)
# effectiveSize(draws)
#Part 4: Add HighSchool Dummy
hs_dum = as.numeric(akdataf$educ >= 12)
X = cbind(akdataf$educ, hs_dum)
nx=2
hsDraws <- do_mcmc(y,X,w,z, nx, nw, nz, nit)
effectiveSize(draws)
hsDraws
# AK_main.R ~ Program for performing MCMC on likelihood of AK data.
# Loads in data from akdata.csv, passes variables into do_mcmc.R function.
# Variables defined from 2SLS model:
# y = beta*x + eps
# x = gamma*z + nu
# (eps, nu) ~ N(0, Sigma)
#Import relevant libraries
library(bayess)
library(moments)
library(VARex5132017)
library(coda)
library(fitR)
source("ivlh_faster.R")
source("ivmcmc_faster.R")
source("do_mcmc.R")
#Question 3: One X variable (X=education)
akdataf <- read.csv("../Data/akdata.csv", header = TRUE)
hist(akdataf$logwage)
y = akdataf$logwage
x = akdataf$educ
qob = akdataf$qob
qob.f = factor(qob)
z = model.matrix(~qob.f)[,2:4]
w= rep(1, length(x))
nx=1
nw=1
nz=3
nit = 10000
# draws <- do_mcmc(y,x,w,z, nx, nw, nz, nit)
# effectiveSize(draws)
#Part 4: Add HighSchool Dummy
hs_dum = as.numeric(akdataf$educ >= 12)
X = cbind(akdataf$educ, hs_dum)
nx=2
hsDraws <- do_mcmc(y,X,w,z, nx, nw, nz, nit)
effectiveSize(draws)
hsDraws
hsDraws
dim(hsDraws)
tail(hsDraws)
effectiveSize(hsDraws)
# AK_main.R ~ Program for performing MCMC on likelihood of AK data.
# Loads in data from akdata.csv, passes variables into do_mcmc.R function.
# Variables defined from 2SLS model:
# y = beta*x + eps
# x = gamma*z + nu
# (eps, nu) ~ N(0, Sigma)
#Import relevant libraries
library(bayess)
library(moments)
library(VARex5132017)
library(coda)
library(fitR)
source("ivlh_faster.R")
source("ivmcmc_faster.R")
source("do_mcmc.R")
#Question 3: One X variable (X=education)
akdataf <- read.csv("../Data/akdata.csv", header = TRUE)
hist(akdataf$logwage)
y = akdataf$logwage
x = akdataf$educ
qob = akdataf$qob
qob.f = factor(qob)
z = model.matrix(~qob.f)[,2:4]
w= rep(1, length(x))
nx=1
nw=1
nz=3
nit = 10000
# draws <- do_mcmc(y,x,w,z, nx, nw, nz, nit)
# effectiveSize(draws)
#Part 4: Add HighSchool Dummy
hs_dum = as.numeric(akdataf$educ >= 12)
X = cbind(akdataf$educ, hs_dum)
nx=2
hsDraws <- do_mcmc(y,X,w,z, nx, nw, nz, nit)
effectiveSize(hsDraws)
hs_dum
sum(hs_dum)
sum(hs_dum)/nobs
tail(hsDraws)
plot(hsDraws[,1],hsDraws[,2])
plot(hsDraws[,1],hsDraws[,2], type="l")
plot(hsDraws[,1],hsDraws[,2], type="p")
nit = 100000
# AK_main.R ~ Program for performing MCMC on likelihood of AK data.
# Loads in data from akdata.csv, passes variables into do_mcmc.R function.
# Variables defined from 2SLS model:
# y = beta*x + eps
# x = gamma*z + nu
# (eps, nu) ~ N(0, Sigma)
#Import relevant libraries
library(bayess)
library(moments)
library(VARex5132017)
library(coda)
library(fitR)
source("ivlh_faster.R")
source("ivmcmc_faster.R")
source("do_mcmc.R")
#Question 3: One X variable (X=education)
akdataf <- read.csv("../Data/akdata.csv", header = TRUE)
hist(akdataf$logwage)
y = akdataf$logwage
x = akdataf$educ
qob = akdataf$qob
qob.f = factor(qob)
z = model.matrix(~qob.f)[,2:4]
w= rep(1, length(x))
nx=1
nw=1
nz=3
nit = 100000
# draws <- do_mcmc(y,x,w,z, nx, nw, nz, nit)
# effectiveSize(draws)
#Part 4: Add HighSchool Dummy
hs_dum = as.numeric(akdataf$educ >= 12)
X = cbind(akdataf$educ, hs_dum)
nx=2
hsDraws <- do_mcmc(y,X,w,z, nx, nw, nz, nit)
effectiveSize(hsDraws)
mean(hsDraws[,1])
hsDraws[,1]
plot(hsDraws[,1],hsDraws[,2])
